package com.service;

import java.io.File;
import java.io.IOException;
import java.util.List;

import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.hssf.util.CellRangeAddress;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
/**
 * 题目的相关逻辑处理
 * @author kone
 * 2017.4.23
 */
import org.springframework.web.multipart.MultipartFile;

import com.dao.impl.DaoImpl;
import com.dao.impl.TopicDaoImpl;
import com.entity.Topics;
@Service
public class TopicService {
	@Autowired
	private DaoImpl daoImpl;
	@Autowired
	private TopicDaoImpl topicDaoImpl;
	
	public void closeSession(){
		topicDaoImpl.closeSession();
	}
	/**
	 * 查看未通过题目
	 * @param gradeId
	 * @param teacherId
	 * @return
	 */
	public List<Topics> viewNotThoughtTopic(String gradeId, long teacherId, String state) {
		List<Topics> topics = topicDaoImpl.findByTwo("Topics", "teacherId", String.valueOf(teacherId), "state", state);
		for(int i=topics.size() - 1;i >= 0;i--) {
			if(topics.get(i).getGrade().getId() != Long.valueOf(gradeId)) {
				
				topics.remove(i);
			}
		}
		for(int i=0;i<topics.size();i++) {
			for(int j=0;j<topics.get(i).getDirections().size();j++) {
				topics.get(i).getDirections().get(j).getDirectionName();
			}
		}
		topicDaoImpl.closeSession();
		return topics;
	}
	/**
	 * 更新或上传附件
	 * @param path
	 * @param id
	 * @param file
	 * @return
	 */
	public boolean addUpdateAttach(String path, String id, MultipartFile file) {
		List<Topics> topics = daoImpl.findBy("Topics", "id", id);
		daoImpl.closeSession();
		if(topics.size() > 0) {
			
			if(!file.isEmpty()) {
				String origName = file.getOriginalFilename();
				int newNameIndex = origName.lastIndexOf('.');
				String suffix = origName.substring(newNameIndex);
				long name = System.currentTimeMillis();
//				文件随机名称
				String fileName = String.valueOf(name)+(int)(Math.random()*10000)+suffix;
				File file3 = new File(path,fileName);
				
				String tempName = topics.get(0).getTaskBookName();
				
				topics.get(0).setTaskBookName(fileName);
				if(daoImpl.update(topics.get(0))) {
					if(topics.get(0).getTaskBookName() != null) {
						File file2 = new File(path, tempName);
						if(file2.exists()) {
							file2.delete();
						}
						
					}
					try {
						file.transferTo(file3);
					} catch (IllegalStateException e) {
						e.printStackTrace();
					} catch (IOException e) {
						e.printStackTrace();
					}
					
					return true;
				}
				
			}
		}
		return false;
	}
	
	
	/**
	 * 导出选题情况
	 * @param gradeId
	 * @return
	 */
	public HSSFWorkbook exportTopic(String gradeId) {
		List<Topics> topics = daoImpl.findByTwo("Topics", "gradeId", gradeId,"state","1");
		
		//创建HSSFWorkbook对象(excel的文档对象)
	     HSSFWorkbook wb = new HSSFWorkbook();
		//建立新的sheet对象（excel的表单）
		HSSFSheet sheet=wb.createSheet("选题情况表");
		//在sheet里创建第一行，参数为行索引(excel的行)，可以是0～65535之间的任何一个
		HSSFRow row1=sheet.createRow(0);
		//创建单元格（excel的单元格，参数为列索引，可以是0～255之间的任何一个
		HSSFCell cell=row1.createCell(0);
		      //设置单元格内容
		cell.setCellValue("选题情况表");
		//合并单元格CellRangeAddress构造参数依次表示起始行，截至行，起始列， 截至列
		sheet.addMergedRegion(new CellRangeAddress(0,0,0,9));
		
		//在sheet里创建第二行
		HSSFRow row2=sheet.createRow(1);    
      //创建单元格并设置单元格内容
       row2.createCell(0).setCellValue("编号");
       row2.createCell(1).setCellValue("题目名称");    
       row2.createCell(2).setCellValue("适用方向");
		row2.createCell(3).setCellValue("可选学生");  
		row2.createCell(4).setCellValue("已选学生"); 
		row2.createCell(5).setCellValue("待选学生");
		row2.createCell(6).setCellValue("指导老师"); 
		row2.createCell(7).setCellValue("发布时间"); 
		row2.createCell(8).setCellValue("题目简介"); 
		row2.createCell(9).setCellValue("是否上传任务书"); 
		
		HSSFRow row = null;
		for (int i=0;i<topics.size();i++) {
			row = sheet.createRow(i+2);
			row.createCell(0).setCellValue(topics.get(i).getId());
			row.createCell(1).setCellValue(topics.get(i).getTopicsName());
			String dire = "";
			for(int j=0;j<topics.get(i).getDirections().size();j++) {
				dire = dire+topics.get(i).getDirections().get(j).getDirectionName()+",";
			}
			row.createCell(2).setCellValue(dire);
			row.createCell(3).setCellValue(topics.get(i).getEnableSelect());
			row.createCell(4).setCellValue(topics.get(i).getSelectedStudent());
			row.createCell(5).setCellValue(topics.get(i).getEnableSelect() - topics.get(i).getSelectedStudent());
			row.createCell(6).setCellValue(topics.get(i).getTeacher().getName());
			row.createCell(7).setCellValue(topics.get(i).getTime());
			row.createCell(8).setCellValue(topics.get(i).getIntroduce());
			if (topics.get(i).getTaskBookName() == null || "".equals(topics.get(i).getTaskBookName())) {
				row.createCell(9).setCellValue("未上传任务书");
			} else {
				row.createCell(9).setCellValue("已上传任务书");
			}
		}
		daoImpl.closeSession();
		return wb;
	}
	
	
	/**
	 * 查看题目数量
	 * @param gradeId
	 * @param state
	 * @param page
	 * @param eachPage
	 * @return
	 */
	public int getTopicsNum (String gradeId, String state) {
		
		return topicDaoImpl.viewTopicNum(gradeId, state);
	}
	
	public List<Topics> getTopics (String gradeId, String state, int page, int eachPage) {
		
		return topicDaoImpl.viewTopic(gradeId, state, page, eachPage);
	}
	/**
	 * 删除未通过的题目
	 * @param topic
	 * @return
	 */
	public boolean deleteTopicNotThrought(Topics topic)	{
		
		return daoImpl.delete(topic);
	}
		
}
